U = {a1, ..., an}
S = {U, {a1}, ..., {an}}
c(Si) = 1 / i

cne(Si) = c(Si) / |Si / C|
C = zbiór dotychaczas pokrytych elementów

Wtedy wartości początkowe cne:
cne(U) = 1 / n
cne({ai}) = (1 / (i + 1)) / 1 = 1 / (i + 1)
stąd cne({an}) = 1 / (n + 1) < 1 / n = cne(U)
wiec wybieramy najpierw {an}

Wszystkie singletony są rozłączne, więc ich cne nie zmienia się.
Natomiast |U / C| zmniejsza się o 1 z każdą iteracją algorytmu.
Więc zawsze będzie zachodzić sytuacja, w której singleton
o najwyższym indeksie będzie miał niższe cne niż U.

Ostatecznie dochodząc do wyboru {a1} pokrywamy całe U.
Koszt rozwiązania jakie zwrócił algorytm jest równy:
1 / 2 + 1 / 3 + ... + 1 / (n + 1)
Koszt rozwiązania optymalnego:
c(U) = 1
stąd:
c * 1 = 1 / 2 + 1 / 3 + ... + 1 / (n + 1) = sum(1 / k)
wiemy, że
x >= 2
2^x >= x + 1
log2(2^x) >= log2(x + 1)
x >= log2(x + 1)
1 / x >= log2(1 / x + 1)
1 / x >= log2((x + 1) / x)
1 / x >= log2(x + 1) - log2(x)
sum(1 / k) >= sum(log2(x + 1) - log(x))
sum(1 / k) >= sum(log2(x + 1)) - sum(log2(x))
sum(1 / k ) >= log2(n + 1)
c >= log2(n + 1)
Z twierdzenia z notatek wiemy, ze c <= log2(n)
wiec c jest blisko log2(n)







